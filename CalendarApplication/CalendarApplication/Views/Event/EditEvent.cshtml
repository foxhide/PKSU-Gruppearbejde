@model CalendarApplication.Models.Event.EventEditModel

@{
    ViewBag.Title = Model.ID == -1 ? "Create event" : "Edit event";
}

@using CalendarApplication.Models.Event
@using CalendarApplication.Models.User

<h2>@(Model.ID == -1 ? "Create new event" : "Edit event: " + Model.Name)</h2>

<h3 style="color:red">@TempData["errorMsg"]</h3>

<script src="@Url.Content("~/Scripts/edit-event.js")" type="text/javascript"></script>

<style>
    #type_warning {
        color:white;
        background-color:red;
        text-align:center;
        position:absolute;
        z-index:2;
        display:none;
        width:280px;
    }
</style>

@using (Html.BeginForm()) {
    @Html.HiddenFor(m => m.ID)

    <table style="margin-left:40px;margin-right:auto;width:70%;border:1px lightgrey solid">
        <tr>
            <td style="width:60%">
                <h3>Basic event details:</h3>
                @Html.HiddenFor(m => m.Approved)
                @Html.HiddenFor(m => m.State)

                @Html.LabelFor(m => m.Name, new { style = "font-weight:bold" })
                @Html.TextBoxFor(m => m.Name, new { onchange="{ setState(); validateInput('Name','Text',true,true); }" })
                <div class="validation-summary-errors" id="Name_Error" style="display:none">
                    The event must have a Name!
                </div>
                <br />
                <br />
                @Html.LabelFor(m => m.SelectedEventType, new { style = "font-weight:bold" })
                @if(Model.CanChangeType)
                {
                    <div style="position:relative;z-index:1">
                        @Html.DropDownListFor(m => Model.SelectedEventType,
                                                new SelectList(Model.EventTypes, "Value", "Text"),
                                                new { onchange="typeCheck(this.value)", style="position:absolute;z-index:1" })
                        @if(Model.ID != -1)
                        {
                            <div id="type_warning">
                                Warning! Changing the type will delete the data previously added for this event.
                                Are you sure?<br />
                                <input type="button" value="Yes" onclick="typeCheckResponse(true,@Model.SelectedEventType)" />
                                <input type="button" value="No" onclick="typeCheckResponse(false,@Model.SelectedEventType)" />
                                <br />
                                @Html.CheckBoxFor(m => m.DeleteFiles)<span style="font-size:8pt">delete files too.</span>
                            </div>
                        }
                    </div>
                }
                else
                {
                    @Html.DropDownListFor(m => Model.SelectedEventType,
                                            new SelectList(Model.EventTypes, "Value", "Text"),
                                            new { disabled="disabled" })
                    @Html.HiddenFor(m => m.SelectedEventType);
                }
                <div class="validation-summary-errors" id="SelectedEventType_Error" style="display:none">
                    The event must have a Type!
                </div>
                <br />
                <br />
                
                <b>State:</b> <span id="state_text" style="color:@Model.getColor()">@Model.getStateText()</span>
                @if (UserModel.GetCurrent().Admin)
                {
                    <!-- Admins may approved/disapprove the event -->
                    <br />
                    <input id="approve_button" type="button" value="@(Model.Approved ? "Disapprove" : "Approve")" onclick="setApproved()"/>
                }
                <br />
                <br />

                @Html.LabelFor(m => m.Start, new { style = "font-weight:bold" }) <br />
                @if(Model.Start > DateTime.Now)
                {
                    @Html.DateTimeEditorFor(m => m.Start, "g.today,l.End", "dateRoomUpdate()")
                }
                else
                {
                    @Model.Start.ToString("dd/MM/yyyy HH:mm");
                    @Html.HiddenFor(m => m.Start);
                    <br />
                }
                <br />
                @Html.LabelFor(m => m.End, new { style = "font-weight:bold" }) <br />
                @if(Model.End > DateTime.Now)
                {
                    @Html.DateTimeEditorFor(m => m.End, "g.today,g.Start", "dateRoomUpdate()")
                }
                else
                {
                    @Model.End.ToString("dd/MM/yyyy HH:mm");
                    @Html.HiddenFor(m => m.End);
                    <br />
                }
                <br />

                @Html.LabelFor(m => m.RoomSelectList, new { style = "font-weight:bold" })
                @Html.ListEditorFor(m => m.RoomSelectList, "Rooms Selected", "Rooms Available",
                        "dateRoomUpdate(); setState(); validateInput('RoomSelectList','List',true,true)",
                        "dateRoomUpdate(); setState()")
                <div class="validation-summary-errors" id="RoomSelectList_Error" style="display:none">
                    You must add some rooms!
                </div>
                <br />

                <input type="button" id="rd_but" value="Check rooms and dates" onclick="checkRooms()" style="background-color:yellow" />
                <div id="room_date_feedback" style="color:red"></div>
                <br />

                <div id="event_specifics">
                    @if (Model.TypeSpecifics != null && Model.TypeSpecifics.Count > 0)
                    {
                        @Html.Partial("EventSpecificList",Model)
                    }
                </div>
                <input type="button" value="@(Model.ID == -1 ? "Create event" : "Save changes")"
                        onclick="if (checkCreate()) { this.form.submit() }"/>
            </td>
            <td>
                <fieldset>
                    <legend>Event Access Rights</legend>
                    Users with editor rights
                    @Html.ListEditorFor(m => m.UserEditorList, "Users Selected", "Users Available")
                    <br />

                    Groups with editor rights
                    @Html.ListEditorFor(m => m.GroupEditorList, "Groups Selected", "Groups Available")
                    <br />

                    Visible: @Html.CheckBoxFor(m => m.Visible, new { onchange="disableLists('GroupVisibleList',this.checked)" })
                    @Html.ListEditorFor(m => m.GroupVisibleList, "Groups Selected", "Groups Available")
                    @if(Model.Visible) { <script>disableLists('GroupVisibleList', true)</script> }
                </fieldset>
            </td>
        </tr>
    </table>

}