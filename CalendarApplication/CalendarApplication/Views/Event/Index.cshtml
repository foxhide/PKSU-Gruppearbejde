@model CalendarApplication.Models.Event.EventWithDetails
@{
    ViewBag.Title = "Event";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using CalendarApplication.Models.Event
@using CalendarApplication.Models.EventType
@using CalendarApplication.Models.User
@using CalendarApplication.Models.Calendar

<script>
    /* Function for printing an event to a pdf */
    function printEvent(eventId) {
        $.ajax({
            url: "/Event/PrintEvent",
            type: 'POST',
            data: { eventId: eventId },
            success: function (result) { window.open(result); }
        });
    }

    // Variable used to keep track of event state
    var cur_state = @Model.State;

    /* Function for changing state of event */
    function setApproval(id, approved) {
        $.ajax({
            url: "/Event/SetState",
            type: 'POST',
            data: { eventId: id, approved: approved },
            success: function(result) {
                $("#state").removeClass();
                $("#state").addClass("state_" + result);
                var button = $("#approve");
                if(result == 0) {
                    button.val("Approve Event");
                }
                else {
                    button.val("Remove approval");
                }
                cur_state = result;
            }
        });
    }
</script>

@if (Model.ID < 0)
{
    <h2>Error loading event!</h2>
    <h3 style="color:red">@TempData["errorMsg"]</h3>
}
else
{
    <h2>Event: @Model.Name</h2>
    
    <style>
        /* Styles used for event display */
        .event-table {
            border-collapse:collapse;
            margin-left:72px;
            margin-right:auto;
            width:64%;
        }
        .event-table tr td {
            padding:5px 5px 5px 10px; /*N,W,S,E*/
            border:1px grey solid;
        }

        #delete_prompt {
            color:white;
            background-color:red;
            text-align:center;
            position:absolute;
            z-index:2;
            display:none;
            width:260px;
        }

        #options_pane {
            position:fixed;
            top:160px;
            right:200px;
            width:140px;
            background-color:lightgrey;
            border:1px darkgrey solid;
        }
        #options_pane table {
            border-collapse:collapse;
            width:100%;
        }
        #options_pane tr td {
            padding:1px 10px 1px 10px;
            background-color:lightgrey;
        }
        #options_pane th {
            padding:3px;
            color:white;
            background-color:black;
        }
    </style>
    
    UserModel u = UserModel.GetCurrent();
    
    <div id="options_pane">
        <table>
            <tr><th>Options</th></tr>
            <tr><td><input type="button" onclick="printEvent(@(Model.ID))" value="Print Event" style="width:100%" disabled="disabled" /></td></tr>
            @if (UserModel.EditAuthentication(Model.ID, UserModel.GetCurrentUserID()))
            {
                <tr><td>
                    <input type="button"
                        onclick="gotoUrl('@Url.Action("EditEvent", "Event", new { eventId = Model.ID, year = 0, month = 0, day = 0 }, null)')"
                        value="Edit event"
                        style="width:100%" />
                </td></tr>
            }
            @if (UserModel.GetCurrentUserID() != -1 && u.Admin && Model.Start > DateTime.Now)
            {
                <tr><td>
                    @using (Html.BeginForm(new { ReturnUrl = ViewBag.ReturnUrl }))
                    {
                        @Html.HiddenFor(model => Model.ID)
                        <div style="position:relative;height:30px;width:100%">
                            <div style="position:absolute;z-index:1;width:100%">
                                <input type="button" onclick="$('#delete_prompt').show()" value="Delete event" style="width:100%" />
                                
                            </div>
                            <div id="delete_prompt">
                                <b>Really, delete this event?</b><br />
                                The data will be removed permanently.<br />
                                <span style="font-size:12px;">
                                    @Html.CheckBox("delFiles") Delete all files associated with event too
                                </span>
                                <br />
                                <input type="submit" value="Delete" />
                                <input type="button" onclick="$('#delete_prompt').hide()" value="Cancel" />
                            </div>
                        </div>
                    }
                </td></tr>
            }
        </table>
    </div>
    
    <table class="event-table">
        <tr id="type">
            <td style="width:100px;"><b>Type</b></td><td>@Model.TypeName</td>
        </tr>
        <tr id="creator">
            <td><b>Created by</b></td><td>@Html.ActionLink(u.GetFullName(), "Index", "User", new { UserId = Model.CreatorId }, null)</td>
        </tr>
        <tr id="creation_date">
            <td><b>Creation date</b></td><td>@Calendar.GetDateTimeString(Model.CreationDate)</td>
        </tr>
        <tr id="from">
            <td><b>From</b></td><td>@Calendar.GetDateTimeString(Model.Start)</td>
        </tr>
        <tr id="to">
            <td><b>To</b></td><td>@Calendar.GetDateTimeString(Model.End)</td>
        </tr>
        <tr id="event_state">
            <td><b>State</b></td>
            <td>
                <span id="state" class="state_@Model.State"></span>
                @if (UserModel.GetCurrentUserID() != -1 && u.Admin)
                {
                    <input id="approve" type="button" value="@(Model.State == 0 ? "Approve event" : "Remove approval")"
                            onclick="setApproval(@Model.ID,cur_state == 0);" />
                }
            </td>
        </tr>
        @if (UserModel.GetCurrentUserID() != -1)
        {
            <tr id="visibel">
                <td><b>Public</b></td><td><div class="@(Model.Visible ? "tick" : "red_cross")" style="width:24px;height:24px"></div></td>
            </tr>
        }
        <tr id="rooms">
            <td><b>Rooms</b></td>
            <td>
                @using (Html.BeginListView("Rooms_list", new string[] { "Name" }, "120px", "300px"))
                {
                    foreach (Room room in Model.Rooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                        </tr>
                    }
                }
            </td>
        </tr>
        @if (Model.TypeSpecifics != null && Model.TypeSpecifics.Count > 0)
        {
            foreach (FieldModel fm in Model.TypeSpecifics)
            {
                <tr>
                    <td><b>@fm.Name</b></td>
                    <td>
                        @switch (fm.Datatype)
                        {
                            case Fieldtype.Float:       @fm.FloatValue break;
                            case Fieldtype.User:        if (fm.IntValue != 0)
                                                        { @Html.ActionLink(fm.StringValue, "Index", "User", new { UserId = fm.IntValue }, null) }
                                                        else
                                                        { @fm.StringValue } break;
                            case Fieldtype.Group:       if (fm.IntValue != 0)
                                                        { @Html.ActionLink(fm.StringValue, "ViewGroup", "Group", new { groupId = fm.IntValue }, null) }
                                                        else
                                                        { @fm.StringValue } break;
                            case Fieldtype.Text:        @fm.StringValue break;
                            case Fieldtype.File:        @fm.IntValue break;
                            case Fieldtype.Datetime:    @fm.DateValue break;
                            case Fieldtype.Bool:        <div style="width:26px;height:26px" class="@(fm.BoolValue ? "tick" : "red_cross")"></div> break;
                            case Fieldtype.UserList:    using (Html.BeginListView("list_" + fm.ID, new string[] { "Users" }, "100px", "auto"))
                                                        {
                                                            foreach (SelectListItem user in fm.List)
                                                            {
                                                                <tr><td>
                                                                    @Html.ActionLink(user.Text, "Index", "User", new { UserId = Convert.ToInt32(user.Value) }, null)
                                                                </td></tr>
                                                            }
                                                        }
                                                        break;
                            case Fieldtype.FileList:    using (Html.BeginListView("list_" + fm.ID, new string[] { "Files" }, "100px", "auto"))
                                                        {
                                                            foreach (SelectListItem group in fm.List)
                                                            {
                                                                <tr><td>
                                                                    @fm.IntValue
                                                                </td></tr>
                                                            }
                                                        }
                                                        break;
                            case Fieldtype.GroupList:   using (Html.BeginListView("list_" + fm.ID, new string[] { "Groups" }, "100px", "auto"))
                                                        {
                                                            foreach (SelectListItem group in fm.List)
                                                            {
                                                                <tr><td>
                                                                    @Html.ActionLink(group.Text, "ViewGroup", "Group", new { groupId = Convert.ToInt32(group.Value) }, null)
                                                                </td></tr>
                                                            }
                                                        }
                                                        break;
                        }
                    </td>
                </tr>
            }
        }
    </table>
}